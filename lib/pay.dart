import 'package:flutter/material.dart';
import 'package:shared_preferences/shared_preferences.dart';
import 'package:thawani_payment/models/create_customers.dart';
import 'package:thawani_payment/models/saveed_cards_model.dart';
import 'package:thawani_payment/viewmodel/keys_viewmodel.dart';
import 'package:thawani_payment/viewmodel/thawani_cards.dart';
import 'package:thawani_payment/viewmodel/thawani_customer.dart';
import 'package:thawani_payment/widgets/pay.dart';
import 'package:thawani_payment/widgets/saved_cards_screen.dart';

import 'models/create.dart';
import 'helper/req_helper.dart';

class Thawani {
  ///  API Code From Thawani Company
  ///
  ///  For Test Mode: rRQ26GcsZzoEhbrP2HZvLYDbn9C9et
  final String api;

  /// The Widget  Shown In The Button , By Default it have Text
  ///
  /// Text("Pay",style: TextStyle(color: Colors.white,fontSize: 17),)
  final Widget? child;

  /// Button Style
  ///
  /// ButtonStyle(
  ///     elevation: MaterialStateProperty.all(0),
  ///     shape: MaterialStateProperty.all(RoundedRectangleBorder(borderRadius: BorderRadius.circular(10))),
  ///    backgroundColor: MaterialStateProperty.all(const Color(0xff4FB76C)),
  ///   )
  final ButtonStyle? buttonStyle;

  /// The Publishable Key From Thawani Company
  ///
  /// For Test Mode: HGvTMLDssJghr9tlN9gr4DVYt0qyBy
  final String pKey;

  /// The Clint Id to be generated by merchant to identify the session (From Thawani API Doc).
  ///
  /// You can use The User ID As Clint ID
  final String clintID;

  /// The customer would be redirected to successUrl if payment processed successfully (From Thawani API Doc).
  ///
  /// In This Package , The URL Unuseful
  final String? successUrl;

  /// The customer would be redirected to successUrl if he decides to cancel the payment (From Thawani API Doc).
  ///
  /// In This Package , The URL Unuseful
  final String? cancelUrl;

  /// A list of products the customer is purchasing. maximum  100 products (From Thawani API Doc).
  ///
  /// [
  ///      {
  ///        "name": "product Name",
  ///         "unit_amount": the price by Baisa, >=100 <=5000000000
  ///        "quantity": the quantity of the line product,  >=1 <=100
  ///       }
  ///     ]
  final List<Map<String, dynamic>> products;

  /// Useful for storing additional information about your products, customers (From Thawani API Doc).
  ///
  /// storing Any Data about your products, customers(users)
  ///
  /// EX:
  /// ```{ "userName":"Nasr Al-Rahbi", "Twitter":"abom_me"}```
  final Map<String, dynamic>? metadata;

  /// Make It true If You Want Test The Package Or The Api
  ///
  /// By Default It's false
  ///
  /// testMode: false
  final bool? testMode;

  ///The Function And The Result Of Data After Create Session.
  final void Function(Create create) onCreate;

  ///The Function And The Result Of Data If The User  Cancelled The Payment.
  final void Function(Map<String, dynamic> payStatus) onCancelled;

  ///The Function And The Result Of Data If The User  Cancelled The Payment.
  final void Function(Map<String, dynamic> payStatus) onPaid;

  ///The Function And The Reason Of The Error,  If Any Error Happen.
  final void Function(Map error)? onError;

  /// Make It true If you want allow the customer to save the payment card
  final bool saveCard;

  /// This function show you the Customer Data if it's a new Customer
  final void Function(CreateCustomerModel data)? onCreateCustomer;

  /// This function show you the Saved Customer ID if it's a exist Customer
  void Function(String data)? getSavedCustomer;

  /// This function show you the Customer Data if it's a new Customer
  final void Function(List<CardData> data)? savedCards;

  /// To change the saved card background color it's shown if [saveCard] is true only
  final Color? savedCardBackground;

  /// To change the saved card Text color it's shown if [saveCard] is true only
  final Color? savedCardTextColor;

  /// To change the appbar in saved cards screen it's shown if [saveCard] is true only
  final Widget? savedCardsAppBarText;

  /// This text show when the user try to delete saved card from  saved cards screen it's shown if [saveCard] is true only
  final String? deleteText;

  /// This text show when the user faced Error in  delete saved card from  saved cards screen it's shown if [saveCard] is true only
  final String? deleteTextError;

  /// This text show when the user click on the saved card from  saved cards screen it's shown if [saveCard] is true only
  final String? selectCardText;

  /// You can send Custom Customer ID to get the  user saved card
  final String? customerID;

  Thawani.pay(BuildContext context,
      {required this.api,
      required this.products,
      required this.onCreate,
      required this.onCancelled,
      required this.onPaid,
      this.child,
      required this.pKey,
      this.metadata,
      required this.clintID,
      this.buttonStyle,
      this.testMode,
      this.customerID,
      required this.saveCard,
      this.onError,
      this.onCreateCustomer,
      this.savedCardBackground,
      this.savedCardTextColor,
      this.savedCardsAppBarText,
      this.getSavedCustomer,
      this.deleteTextError,
      this.deleteText,
      this.selectCardText,
      this.savedCards,
      this.successUrl,
      this.cancelUrl}) {
    // ThawaniKeys k=ThawaniKeys();
    userApiKey = api;
    userClintID = clintID;
    userMetadata = metadata;
    userPKey = pKey;
    userProducts = products;
    isTestMode = testMode ?? false;
    userSuccessUrl = successUrl;
    userCancelUrl = cancelUrl;
    userSavedCardBackground = savedCardBackground ?? const Color(0xff0d0d10);
    userSavedCardTextColor = savedCardTextColor ?? const Color(0xffffffff);
    userSavedCardsAppBar = savedCardsAppBarText ?? const Text("Saved Cards");
    userDeleteLoading = deleteText ?? "Deleting...";
    userSelectCardLoading = selectCardText ?? "Loading...";
    userDeleteError = deleteTextError ?? "Error, Can't delete this card";
    userSaveCard = saveCard;

    ThawaniCustomers().checker(
        customer: customerID,
        testMode: isTestMode,
        apiKey: api,
        customerId: clintID,
        onError: (error) {},
        onDone: (id, clint) {
          getSavedCustomer?.call(id);
          userCustomerID = id;
          if (saveCard) {
            ThawaniCards().get(
                testMode: isTestMode,
                customerId: id,
                apiKey: api,
                onError: (error) {},
                onDone: (data) {
                  if (data.data!.isEmpty) {
                    payApi(
                        context: context,
                        api: api,
                        publishKey: pKey,
                        clintID: clintID,
                        products: products,
                        onCreate: onCreate,
                        onCancelled: onCancelled,
                        onPaid: onPaid,
                        onError: onError,
                        customerID: id,
                        testMode: isTestMode);
                  } else {
                    savedCards?.call(data.data!);

                    int totalAmount = 0;

                    for (var product in products) {
                      totalAmount +=
                          int.parse(product["unit_amount"].toString());
                    }
                    Navigator.push(
                        context,
                        MaterialPageRoute(
                            builder: (context) => SavedCardsScreen(
                                  saved: data,
                                  apiKey: api,
                                  amount: totalAmount,
                                  returnLink: successUrl ??
                                      'https://abom.me/package/thawani/suc.php',
                                  testMode: isTestMode,
                                  metadata: metadata,
                                  onCancelledCard:
                                      (Map<String, dynamic> payStatus) {
                                    Navigator.pop(context);

                                    onCancelled(payStatus);
                                  },
                                  onPaidCard: (Map<String, dynamic> payStatus) {
                                    Navigator.pop(context);
                                    onPaid(payStatus);
                                  },
                                  onCreateCard: (Create data) {
                                    onCreate(data);
                                  },
                                )));
                  }
                });
          } else {
            payApi(
                context: context,
                api: api,
                publishKey: pKey,
                clintID: clintID,
                products: products,
                onCreate: onCreate,
                onCancelled: onCancelled,
                onPaid: onPaid,
                onError: onError,
                customerID: id,
                testMode: isTestMode);
          }
        },
        newCustomer: (CreateCustomerModel userData) async {
          SharedPreferences share = await SharedPreferences.getInstance();
          share.setString("customerId", userData.data!.id!);
          if (userData.data != null) onCreateCustomer?.call(userData);
        });
  }

  payApi({
    required BuildContext context,
    required String api,
    required String publishKey,
    required String clintID,
    required String customerID,
    required List<Map<String, dynamic>> products,
    String? successUrl,
    String? cancelUrl,
    Map<String, dynamic>? metadata,
    required bool testMode,
    required void Function(Create create) onCreate,

    ///The Function And The Result Of Data If The User  Cancelled The Payment.
    required void Function(Map<String, dynamic> payStatus) onCancelled,

    ///The Function And The Result Of Data If The User  Cancelled The Payment.
    required void Function(Map<String, dynamic> payStatus) onPaid,

    ///The Function And The Reason Of The Error,  If Any Error Happen.
    required Function(Map error)? onError,
  }) async {
    late Map<String, dynamic> dataBack;

    Future<Create> createS() async {
      return Create.fromJson(dataBack);
    }

    // Future<StatusClass> payStatus(dataStatute) async {
    //   return StatusClass.fromJson(dataStatute);
    // }

    dataBack = await RequestHelper.postRequest(
        api,
        {
          if (userSaveCard) "customer_id": customerID,
          "save_card_on_success": saveCard,
          "client_reference_id": clintID,
          "mode": "payment",
          "products": products,
          "success_url":
              successUrl ?? 'https://abom.me/package/thawani/suc.php',
          "cancel_url": cancelUrl ?? "https://abom.me/package/thawani/can.php",
          if (metadata != null) "metadata": metadata,
        },
        testMode);
    // print(dataBack);
    if (dataBack['code'] == 2004) {
      createS().then((value) => {onCreate(value)});
      if (context.mounted) {
        Navigator.push(
            context,
            MaterialPageRoute(
                builder: (context) => PayWidget(
                      api: api,
                      uri: dataBack['data']['session_id'],
                      url: testMode == true
                          ? 'https://uatcheckout.thawani.om/pay/${dataBack['data']['session_id']}?key=$publishKey'
                          : 'https://checkout.thawani.om/pay/${dataBack['data']['session_id']}?key=$publishKey',
                      paid: (statusClass) {
                        onPaid(statusClass);
                      },
                      unpaid: (statusClass) {
                        onCancelled(statusClass);
                      },
                      testMode: testMode,
                    )));
      }
      if (context.mounted) return;
    } else if (dataBack['code'] != 2004) {
      return onError!(dataBack);
    } else if (dataBack['code'] == null) {
      return onError!(dataBack);
    }
  }
}
